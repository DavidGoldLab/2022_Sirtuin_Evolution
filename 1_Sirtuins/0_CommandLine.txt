###################
# Blast with query 
###################

# >sp|Q8R216|SIR4_MOUSE
# MSGLTFRPTKGRWITHLSRPRSCGPSGLFVPPSPPLDPEKIKELQRFISLSKKLLVMTGA
# GISTESGIPDYRSEKVGLYARTDRRPIQHIDFVRSAPVRQRYWARNFVGWPQFSSHQPNP
# AHWALSNWERLGKLHWLVTQNVDALHSKAGSQRLTELHGCMHRVLCLNCGEQTARRVLQE
# RFQALNPSWSAEAQGVAPDGDVFLTEEQVRSFQVPCCDRCGGPLKPDVVFFGDTVNPDKV
# DFVHRRVKEADSLLVVGSSLQVYSGYRFILTAREQKLPIAILNIGPTRSDDLACLKLDSR
# CGELLPLIDPRRQHSDVQRLEMNFPLSSAAQDP

blastp -query 0_Query.fasta \
-db /Volumes/Gold_USB/Sirtuin_BLAST/0_Sirtuin_BLAST_Database \
-outfmt 6 -out 1_DB_BLAST_Hits.txt

xargs samtools faidx /Volumes/Gold_USB/Sirtuin_BLAST/0_Sirtuin_BLAST_Database \
< 1_DB_BLAST_Hits.txt > 1_DB_BLAST_Hits.fasta

#######################################
# Combine results with NCBI BLAST hits
#######################################

cat 1_DB_BLAST_Hits.fasta 1_NCBI_BLAST_Hits.fasta > 2_Sirtuin_BLAST_Hits.fasta

############################################
# Annotate genes with Uniprot Swissprot IDs
############################################

blastp -query 2_Sirtuin_BLAST_Hits.fasta -db uniprot_sprot.pep \
-num_threads 32 -max_target_seqs 1 -outfmt 6 -evalue 1e-3 > 3_blastp.outfmt6

awk '{print $1, $2}' OFS='\t' 3_blastp.outfmt6 > tmp0

gsed s/"\(>\)\(.*\)"/"\1\2\t"/g 2_Sirtuin_BLAST_Hits.fasta > tmp1 
tr -d '\n' < tmp1  > tmp2
gsed 's/>/\n/g' tmp2 > tmp3
gsed -r '/^\s*$/d' tmp3 > tmp4
join <(sort tmp0) <(sort tmp4) > tmp5
sort -u tmp5 > tmp6
gsed 's/^/>/g' tmp6 > tmp7
gsed -E 's/ ([^ ]*)$/\n\1/' tmp7 > tmp8
gsed -E 's/^([^ ]*) /\1|/' tmp8 > 3_Sirtuin_BLAST_Hits.Annotated.fasta
rm tmp*

################################
# Identify domains with PfamScan
################################

	# ftp://ftp.ebi.ac.uk/pub/databases/Pfam//Tools/PfamScan.tar.gz

# pfam_scan can be installed with Conda. Add conda cask to homebrew:
conda install -c bioconda pfam_scan

# You will need to download the following files from the Pfam ftp site 
# (ftp://ftp.ebi.ac.uk/pub/databases/Pfam/current_release/):
	# Pfam-A.hmm
	# Pfam-A.hmm.dat

# Generate binary files for Pfam-A.hmm by running the following commands:
hmmpress Pfam-A.hmm

# Run PfamScan
pfam_scan.pl \
-outfile 4_Pfam_output.txt \
-fasta 3_Sirtuin_BLAST_Hits.Annotated.fasta -dir /Users/davidgold/Documents/bioinformatics/HMMScan

#####################################
# Convert PFAM output to GFF3 format
#####################################

# Convert HMMScan output to GFF3 with pfam2gff.py
	# https://github.com/wrf/genomeGTFtools

wget https://github.com/wrf/genomeGTFtools/blob/master/pfam2gff.py?raw=true
mv pfam2gff.py?raw=true pfam2gff.py
python pfam2gff.py \
-i 4_Pfam_output.txt > 4_Pfam_output.gff


# use squeeze flag (-s) in tr to replace all white spaces with a tab
tr -s ' ' \\t < 4_Pfam_output.txt > tmp1
# remove header and empty lines
gsed s/^#.*//g tmp1 > tmp2
gsed -i '/^$/d' tmp2
awk -v OFS='\t' '{print $1,"hmmscan","PFAM",$2,$3,$12,".",".","ID="$6"."$7";Name="$7}' tmp2 > 4_Pfam_output.gff3
rm tmp*

# Create GFF3 file with SIR2 domains only
grep '.*Name=SIR2$' 4_Pfam_output.gff3 > 4_Pfam_output.SIR2_Domains.gff3

# Extract with Geneious
	# Use "Extract Annotation" function, concatenating domains in each sequence
	# 2 sequences broken into distinct full SIR2 domains:
		# Amphimedon_queenslandica|XP_019864326.1|SIR2_DANRE - SIR2
		# Stylissa_carteri|maker-SC_scaffold144383-augustus-gene-0.30-mRNA-1|SIR1_ARATH - SIR2
		

## Extract domains with samtools ##

grep '.* SIR2 *' 4_Pfam_output.txt > tmp1
# use squeeze flag (-s) in tr to replace all white spaces with a tab
tr -s ' ' \\t < tmp1 > tmp2
# extract envelope coordinates
awk -v OFS='\t' '{print $1,$4,$5}' tmp2 > tmp3
# Sir domain divided into multiple fragments on some genes, concatenate 
awk -F'\t' -v OFS='\t' '{x=$1;$1="";a[x]=a[x]$0}END{for(x in a)print x,a[x]}' tmp3 > tmp4
tr -s '\t' \\t < tmp4 > tmp5
# Extract name, first envelope coordinate, last envelope coordinate
awk -v OFS='\t' '{print "\047"$1"\047"":"$2"-"$NF}' tmp5 > tmp6
# Extract domains with samtools
xargs samtools faidx --length 100000000 3_Sirtuin_BLAST_Hits.Annotated.fasta < tmp6 > 4_Sir2_Domains.fasta
# Cleanup
rm tmp*

	# Not effective; produces too many fragments
	# Analyze and extract GFF3 domains using Geneious (file 5_SIR2_Domains.Geneious.fasta)

#################################
# Clean SIR2 domains with CD-Hit
#################################

# create temp directory

mkdir temp
cd temp

# Format results so each line is one sequence

gsed s/"\(>\)\(.*\)"/"\1\2\t"/g ../5_SIR2_Domains.Geneious.fasta > tmp1
tr -d '\n' < tmp1  > tmp2
gsed 's/>/\n>/g' tmp2 > tmp3
gsed -E 's/^([^|]*)|/\1\t/' <(sort tmp3) > 5_Sir2_Domains.txt
rm tmp*

# split into files by ID

awk -F'\t' '!_[$1]++ { fn && close(fn)
fn = $1 ".tmp"
}
{ print > fn } ' 5_Sir2_Domains.txt

# reformat into fasta

for i in *.tmp; do
	gsed -E 's/^([^\t]*)\t/\1/;s/\t([^\t]*)$/\n\1/' $i > ${i%.tmp}.fasta;
done

for i in *.fasta; do
	cd-hit -i $i -o ${i%.fasta}.cd-hit.txt -d 100 -c 0.90;
done

cat *.cd-hit.txt > ../6_SIR2_Domains.cd-hit.fasta

cd ../
rm -r temp

######################################################
# Remove sequences that are shorter than 90 basepairs
######################################################

awk 'BEGIN {RS = ">" ; ORS = ""} length($2) >= 90 {print ">"$0}'  6_SIR2_Domains.cd-hit.fasta \
> 7_SIR2_Domains.cd-hit.long.fasta

awk 'BEGIN {RS = ">" ; ORS = ""} length($2) <= 90 {print ">"$0}'  6_SIR2_Domains.cd-hit.fasta \
> 7_SIR2_Domains.cd-hit.short.fasta

####################################
# Align with MAFFT (E-INS-i method)
####################################

einsi 7_SIR2_Domains.cd-hit.long.fasta > 8_SIR2_Domains.mafft.fasta

#########################
# Make tree with IQ-TREE
#########################

iqtree -s 8_SIR2_Domains.mafft.fasta -m MFP -bb 1000 -nt 16

# Remove probable contaminant/HGT sequences (output = 9_SIR2_Domains.vetted.fasta)

####################################
# Realign and create new gene tree
####################################

einsi 9_SIR2_Domains.vetted.fasta > 9_SIR2_Domains.vetted.mafft.fasta

iqtree -s 9_SIR2_Domains.vetted.mafft.fasta -m MFP -bb 1000 -nt 16

# Output tree (9_SIR2_Domains.vetted.mafft.fasta.contree.tree) visually examined and rooted in Geneious. Exported as 9b_NOTUNG_Rooted_Tree.tree

######################################
# Species tree correction with Notung
######################################
 
# Create species tree with Taxize (in R)
	# Taxonomic IDs collected from Taxonomy browser
	# https://www.ncbi.nlm.nih.gov/Taxonomy/TaxIdentifier/tax_identifier.cgi

R
library(rentrez)
set_entrez_key("caf5a264ddfad4387223d75ec91de4248508")
Sys.getenv("ENTREZ_KEY")

library(taxize)
library(ape)
setwd("~/Google Drive/Manuscripts/20_Sirtuins")
species <- read.csv(file="./8_R_Taxa.txt",header = FALSE)
species_id <- species[, 2]
taxize_class <- classification(species_id, db = "ncbi")
taxize_tree <- class2tree(taxize_class, check = TRUE)
plot(taxize_tree)
write.tree(taxize_tree[["phylo"]], file = "9b_Notung_Species_Tree.newick", append = FALSE)

	# Polytomies broken manually using the GUI Mesquite

# Run NoTung
 
java -jar /Users/davidgold/Documents/bioinformatics/Notung-2/Notung-2.9.1.5.jar \
-g 9b_NOTUNG_Rooted_Tree.tree -s 9b_Notung_Species_Tree.newick \
--edgeweights name --rearrange --threshold 90% --speciestag prefix \
--nolosses --log  --events --treeoutput newick

Cp 9b_NOTUNG_Rooted_Tree.tree.rearrange.0 9b_NOTUNG_Final.tree
